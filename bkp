#!/bin/bash

# Script for backup and restore of Docker volumes
# Usage: ./bkp [restore] [service|all]

set -e

BACKUP_DIR="./backups"
MAX_BACKUPS=3

# Define volumes for each service
declare -A SERVICE_VOLUMES
SERVICE_VOLUMES["docmost"]=("docmost_docmost-data" "docmost_postgres-data" "docmost_redis-data")
SERVICE_VOLUMES["gitea"]=("gitea_gitea-data" "gitea_postgres-data")
SERVICE_VOLUMES["planka"]=("planka_user-avatars" "planka_favicons" "planka_background-images" "planka_attachments" "planka_postgres-data")
SERVICE_VOLUMES["vaultwarden"]=("vaultwarden_vaultwarden-data")

# All volumes for backup
ALL_VOLUMES=(
    "docmost_docmost-data"
    "docmost_postgres-data" 
    "docmost_redis-data"
    "gitea_gitea-data"
    "gitea_postgres-data"
    "planka_user-avatars"
    "planka_favicons"
    "planka_background-images"
    "planka_attachments"
    "planka_postgres-data"
    "vaultwarden_vaultwarden-data"
)

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Function to cleanup old backups
cleanup_old_backups() {
    local volume_name=$1
    local backup_pattern="$BACKUP_DIR/${volume_name}_*.tar.gz"
    
    # Count existing backups
    local backup_count=$(ls -1 $backup_pattern 2>/dev/null | wc -l)
    
    if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
        echo "Removing old backups for $volume_name..."
        # Sort by date and remove oldest ones
        ls -1t $backup_pattern | tail -n +$((MAX_BACKUPS + 1)) | xargs rm -f
    fi
}

# Function to create backup
create_backup() {
    local volume_name=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$BACKUP_DIR/${volume_name}_${timestamp}.tar.gz"
    
    echo "Creating backup for $volume_name..."
    
    # Check if volume exists
    if ! docker volume inspect "$volume_name" >/dev/null 2>&1; then
        echo "Warning: Volume $volume_name not found, skipping"
        return 0
    fi
    
    # Create temporary container for backup
    docker run --rm -v "$volume_name":/data -v "$(pwd)/$BACKUP_DIR":/backup alpine tar czf "/backup/$(basename $backup_file)" -C /data .
    
    echo "Backup created: $backup_file"
    
    # Cleanup old backups
    cleanup_old_backups "$volume_name"
}

# Function to restore backup
restore_backup() {
    local volume_name=$1
    
    # Find latest backup for volume
    local latest_backup=$(ls -1t "$BACKUP_DIR/${volume_name}_"*.tar.gz 2>/dev/null | head -n 1)
    
    if [ -z "$latest_backup" ]; then
        echo "Error: Backup for volume $volume_name not found"
        return 1
    fi
    
    echo "Restoring $volume_name from $latest_backup..."
    
    # Check if volume exists, create if not
    if ! docker volume inspect "$volume_name" >/dev/null 2>&1; then
        echo "Creating volume $volume_name..."
        docker volume create "$volume_name"
    fi
    
    # Restore from backup
    docker run --rm -v "$volume_name":/data -v "$(pwd)/$(dirname $latest_backup)":/backup alpine sh -c "cd /data && tar xzf /backup/$(basename $latest_backup) --strip-components=0"
    
    echo "Restore completed for $volume_name"
}

# Function to backup service
backup_service() {
    local service=$1
    local volumes=("${SERVICE_VOLUMES[$service]}")
    
    if [ ${#volumes[@]} -eq 0 ]; then
        echo "Error: Unknown service '$service'. Available services: ${!SERVICE_VOLUMES[@]}"
        exit 1
    fi
    
    echo "Backing up service: $service"
    for volume in "${volumes[@]}"; do
        create_backup "$volume"
    done
}

# Function to restore service
restore_service() {
    local service=$1
    local volumes=("${SERVICE_VOLUMES[$service]}")
    
    if [ ${#volumes[@]} -eq 0 ]; then
        echo "Error: Unknown service '$service'. Available services: ${!SERVICE_VOLUMES[@]}"
        exit 1
    fi
    
    echo "Restoring service: $service"
    
    # Stop service containers before restore
    echo "Stopping $service containers..."
    docker-compose -f "$service/docker-compose.yml" down 2>/dev/null || true
    
    for volume in "${volumes[@]}"; do
        restore_backup "$volume"
    done
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [restore] [service|all]"
    echo ""
    echo "Commands:"
    echo "  all                    Backup/restore all services"
    echo "  [service]              Backup/restore specific service"
    echo "  restore [service|all]  Restore from backup"
    echo ""
    echo "Available services: ${!SERVICE_VOLUMES[@]}"
    echo ""
    echo "Examples:"
    echo "  $0 all                 # Backup all services"
    echo "  $0 docmost             # Backup docmost service"
    echo "  $0 restore all         # Restore all services"
    echo "  $0 restore gitea       # Restore gitea service"
}

# Main logic
case "$1" in
    "restore")
        case "$2" in
            "all")
                echo "Restore mode for all services..."
                
                # Stop all containers before restore
                echo "Stopping all containers..."
                docker-compose -f docmost/docker-compose.yml down 2>/dev/null || true
                docker-compose -f gitea/docker-compose.yml down 2>/dev/null || true
                docker-compose -f planka/docker-compose.yml down 2>/dev/null || true
                docker-compose -f vaultwarden/docker-compose.yml down 2>/dev/null || true
                
                # Restore each volume
                for volume in "${ALL_VOLUMES[@]}"; do
                    restore_backup "$volume"
                done
                
                echo "Restore completed. Start containers with: docker-compose up -d"
                ;;
            "")
                show_usage
                exit 1
                ;;
            *)
                restore_service "$2"
                echo "Restore completed for $2. Start containers with: docker-compose up -d"
                ;;
        esac
        ;;
    "all")
        echo "Backup mode for all services..."
        
        # Create backup for each volume
        for volume in "${ALL_VOLUMES[@]}"; do
            create_backup "$volume"
        done
        
        echo "Backup completed. Files saved in $BACKUP_DIR"
        ;;
    "")
        show_usage
        exit 1
        ;;
    *)
        # Check if it's a valid service
        if [[ -n "${SERVICE_VOLUMES[$1]}" ]]; then
            echo "Backup mode for service: $1"
            backup_service "$1"
            echo "Backup completed for $1. Files saved in $BACKUP_DIR"
        else
            echo "Error: Unknown service '$1'"
            show_usage
            exit 1
        fi
        ;;
esac 