networks:
  traefik-network:
    external: true
  authentik-net:
    internal: true

volumes:
  postgres-data:
  redis-data:
  authentik-media:
  authentik-templates:
  authentik-certs:

services:
  db:
    image: postgres:${PG_IMAGE_TAG}
    container_name: authentik-db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${PG_DB_NAME} -U ${PG_DB_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PASSWORD}
      - POSTGRES_DB=${PG_DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - authentik-net

  redis:
    image: redis:${REDIS_IMAGE_TAG}
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-data:/data
    networks:
      - authentik-net

  authentik:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_IMAGE_TAG}
    container_name: authentik
    restart: always
    command: server
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__USER=${PG_DB_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB_NAME}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_DB_PASSWORD}
      - AUTHENTIK_REDIS__HOST=redis
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
    networks:
      - authentik-net
      - traefik-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.rule=Host(`${HOST_NAME}`)
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.tls.certresolver=cloudflare
      - traefik.http.routers.authentik.service=authentik
      - traefik.http.services.authentik.loadbalancer.server.port=${AUTHENTIK_PORT:-9000}
      - traefik.docker.network=traefik-network
      - traefik.http.middlewares.authentik.forwardauth.address=https://${HOST_NAME}/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

  worker: 
    image: ghcr.io/goauthentik/server:${AUTHENTIK_IMAGE_TAG}
    container_name: authentik-worker
    command: worker
    restart: always
    user: root
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__USER=${PG_DB_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB_NAME}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_DB_PASSWORD}
      - AUTHENTIK_REDIS__HOST=redis
    volumes:
      - authentik-certs:/certs
      - authentik-media:/media
      - authentik-templates:/templates
    networks:
      - authentik-net 